var documenterSearchIndex = {"docs":
[{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"note: Warning\nDocs are a work in progress.","category":"page"},{"location":"amortized_bayesian_inference/#Introduction","page":"Amortized Bayesian Inference","title":"Introduction","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"This page demonstrates how to perform amortized Bayesian inference using neural networks. Click below to reveal a full copy-and-pastable version of the code.","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"<details>\n<summary><b>Show Full Code</b></summary>","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"using ACTRPVT\nusing AlgebraOfGraphics\nusing BSON: @save\nusing CairoMakie\nusing Distributions\nusing Flux\nusing NeuralEstimators\nusing Plots\n\nn = 1           # dimension of each data replicate \nm = 50          # number of independent replicates \nd = 4           # dimension of the parameter vector θ\nw = 128         # width of each hidden layer \n\nfunction sample(K)\n    υτ = rand(MvNormal([5, 4], [4 2; 2 4]), K)\n    λ = rand(Beta(25, .5), K)\n    γ = rand(truncated(Normal(.04, .015),.01, Inf), K)\n    θ = vcat(υτ, λ' , γ')\n    return θ\nend\nto_matrix(x) = reshape(x, 1, length(x))\nsimulate(θ, m) = [to_matrix(rand(PVTModel(ϑ...), m)) for ϑ ∈ eachcol(θ)] \n\n# Approximate distribution\napprox_dist = NormalisingFlow(d, 2d)\n\n# Neural network mapping data to summary statistics (of the same dimension used in the approximate distribution)\nψ = Chain(x -> sign.(x) .* log.(1 .+ abs.(x)), Dense(n, w, relu), Dense(w, w, relu))  \nϕ = Chain(Dense(w, w, relu), Dense(w, 2d))           \nnetwork = DeepSet(ψ, ϕ)\n\n# Initialise a neural posterior estimator\nestimator = PosteriorEstimator(approx_dist, network) \n\n# Train the estimator\nestimator = train(\n    estimator, \n    sample, \n    simulate; \n    m, \n    K = 15_000\n)\n\n# Assess the estimator\nθ_test = sample(1000)\nZ_test = simulate(θ_test, m)\nassessment = assess(estimator, θ_test, Z_test; parameter_names = [\"υ\", \"τ\", \"λ\", \"γ\"])\nbias(assessment)  \nrmse(assessment) \nrecovery_plot = AlgebraOfGraphics.plot(assessment)\n\n# Apply the estimator to observed data\ntitle = [\"υ\" \"τ\" \"λ\" \"γ\"]\nθ = [4, 3, 0.97, 0.05]       # true parameters\nZ = simulate(θ, m)      # \"observed\" data\npost_samples = sampleposterior(estimator, Z)\nPlots.histogram(\n    post_samples';\n    layout = (4, 1),\n    color = :grey,\n    grid = false,\n    norm = true,\n    leg = false,\n    title\n)\nvline!([θ'], color = :darkred, linewidth = 2)\n\n# Apply the estimator to observed data\nθ = [6, 4, 0.98, 0.03]       # true parameters\nZ = simulate(θ, m)      # \"observed\" data\npost_samples = sampleposterior(estimator, Z)\nPlots.histogram(\n    post_samples';\n    layout = (4, 1),\n    color = :grey,\n    grid = false,\n    norm = true,\n    leg = false,\n    title\n)\nvline!([θ'], color = :darkred, linewidth = 2)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"</details>","category":"page"},{"location":"amortized_bayesian_inference/#Load-the-Dependencies","page":"Amortized Bayesian Inference","title":"Load the Dependencies","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"using ACTRPVT\nusing AlgebraOfGraphics\nusing BSON: @save\nusing CairoMakie\nusing Distributions\nusing Flux\nusing NeuralEstimators\nusing Plots","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"n = 1           # dimension of each data replicate \nm = 50          # number of independent replicates \nd = 4           # dimension of the parameter vector θ\nw = 128         # width of each hidden layer ","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"function sample(K)\n    υτ = rand(MvNormal([5, 4], [4 2; 2 4]), K)\n    λ = rand(Beta(25, .5), K)\n    γ = rand(truncated(Normal(.04, .015),.01, Inf), K)\n    θ = vcat(υτ, λ' , γ')\n    return θ\nend","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"to_matrix(x) = reshape(x, 1, length(x))\nsimulate(θ, m) = [to_matrix(rand(PVTModel(ϑ...), m)) for ϑ ∈ eachcol(θ)] ","category":"page"},{"location":"amortized_bayesian_inference/#Configure-the-Neural-Network","page":"Amortized Bayesian Inference","title":"Configure the Neural Network","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"approx_dist = NormalisingFlow(d, 2d)\n\nψ = Chain(x -> sign.(x) .* log.(1 .+ abs.(x)), Dense(n, w, relu), Dense(w, w, relu))\nϕ = Chain(Dense(w, w, relu), Dense(w, 2d))           \nnetwork = DeepSet(ψ, ϕ)","category":"page"},{"location":"amortized_bayesian_inference/#create-the-estimator","page":"Amortized Bayesian Inference","title":"create the estimator","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"estimator = PosteriorEstimator(approx_dist, network) ","category":"page"},{"location":"amortized_bayesian_inference/#Train-the-estimator","page":"Amortized Bayesian Inference","title":"Train the estimator","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"estimator = train(\n    estimator, \n    sample, \n    simulate; \n    m, \n    K = 15_000\n)","category":"page"},{"location":"amortized_bayesian_inference/#Assess-the-estimator","page":"Amortized Bayesian Inference","title":"Assess the estimator","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"θ_test = sample(1000)\nZ_test = simulate(θ_test, m)\nassessment = assess(estimator, θ_test, Z_test; parameter_names = [\"υ\", \"τ\", \"λ\", \"γ\"])\nbias(assessment)  \nrmse(assessment) \nrecovery_plot = AlgebraOfGraphics.plot(assessment)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"(Image: )","category":"page"},{"location":"amortized_bayesian_inference/#Estimate-the-Posterior-Distributions","page":"Amortized Bayesian Inference","title":"Estimate the Posterior Distributions","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"The examples below estimate the posterior distributions using data generated from two different sets of parameters. The vertical red lines in each sub-plot indicate the ground truth parameter values. ","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"title = [\"υ\" \"τ\" \"λ\" \"γ\"]\nθ = [4, 3, 0.97, 0.05]       # true parameters\nZ = simulate(θ, m)      # \"observed\" data\npost_samples = sampleposterior(estimator, Z)\nPlots.histogram(\n    post_samples';\n    layout = (4, 1),\n    color = :grey,\n    grid = false,\n    norm = true,\n    leg = false,\n    title\n)\nvline!([θ'], color = :darkred, linewidth = 2)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"(Image: )","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"θ = [6, 4, 0.98, 0.03]       # true parameters\nZ = simulate(θ, m)      # \"observed\" data\npost_samples = sampleposterior(estimator, Z)\nPlots.histogram(\n    post_samples';\n    layout = (4, 1),\n    color = :grey,\n    grid = false,\n    norm = true,\n    leg = false,\n    title\n)\nvline!([θ'], color = :darkred, linewidth = 2)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"(Image: )","category":"page"},{"location":"amortized_bayesian_inference/#Save-the-Trained-Neural-Network","page":"Amortized Bayesian Inference","title":"Save the Trained Neural Network","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"One main benefit of amortized inference is that the trained neural network can be saved and reused in different applications. The code block below shows how to save the weights of the trained neural network.","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"model_state = Flux.state(estimator)\n@save \"actr_pvt_model.bson\" model_state","category":"page"},{"location":"amortized_bayesian_inference/#Reload-the-Trained-Neural-Network","page":"Amortized Bayesian Inference","title":"Reload the Trained Neural Network","text":"","category":"section"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"The weights can be reloaded into a new Julia session via:","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"@load \"actr_pvt_model.bson\" model_state\nFlux.loadmodel!(estimator, model_state)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"Note that you will need to load dependencies and initialize a new neural network before passing the weights. Click the code below to see a full working example.","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"<details>\n<summary><b>Show Full Code</b></summary>","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"using ACTRPVT\nusing AlgebraOfGraphics\nusing BSON: @load\nusing CairoMakie\nusing Distributions\nusing Flux\nusing NeuralEstimators\nusing Plots\n\nn = 1           # dimension of each data replicate \nm = 50          # number of independent replicates \nd = 4           # dimension of the parameter vector θ\nw = 128         # width of each hidden layer \n\nfunction sample(K)\n    υτ = rand(MvNormal([5, 4], [4 2; 2 4]), K)\n    λ = rand(Beta(25, 0.5), K)\n    γ = rand(truncated(Normal(0.04, 0.015), 0.01, Inf), K)\n    θ = vcat(υτ, λ', γ')\n    return θ\nend\nto_matrix(x) = reshape(x, 1, length(x))\nsimulate(θ, m) = [to_matrix(rand(PVTModel(ϑ...), m)) for ϑ ∈ eachcol(θ)]\n\n# Approximate distribution\napprox_dist = NormalisingFlow(d, 2d)\n\n# Neural network mapping data to summary statistics (of the same dimension used in the approximate distribution)\nψ = Chain(x -> sign.(x) .* log.(1 .+ abs.(x)), Dense(n, w, relu), Dense(w, w, relu)) # NB now using log-transform for numerical stability\nϕ = Chain(Dense(w, w, relu), Dense(w, 2d))\nnetwork = DeepSet(ψ, ϕ)\n\n# Initialise a neural posterior estimator\nestimator = PosteriorEstimator(approx_dist, network)\n\n@load \"actr_pvt_model.bson\" model_state\nFlux.loadmodel!(estimator, model_state)","category":"page"},{"location":"amortized_bayesian_inference/","page":"Amortized Bayesian Inference","title":"Amortized Bayesian Inference","text":"</details>","category":"page"},{"location":"#ACTRPVT.jl","page":"Home","title":"ACTRPVT.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ACTRPVT.jl","category":"page"}]
}
